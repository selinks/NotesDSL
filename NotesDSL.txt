Notes.txt

Wed Oct 26 16:45:08 EEST 2022

NotesDSL<NotesDSL>


NotesDSL<NotesDSL>

NotesDSL is NL subset with added own syntax and semantics, represents NL thinking in NL typed NL notions as NotesDSL operating with NotesDSL notions-types-categories, that contain NL notions.

NotesDSL is initial notion-type-category, that contains NL description of itself.

NotesDSL syntax is regular, NotesDSL semantics is syntactic and represented as runtime of NotesDSL interpreter implementation of NotesDSL.




Sun Oct 30 17:29:34 EET 2022

PhysicalRealityLawSyntacticBehaviour{PhysicalRealityLawSyntacticBehaviour}


PhysicalRealityLawSyntacticBehaviour{PhysicalRealityLawSyntacticBehaviour}

First law is that everything is vzaimosvyazano and everything have it's own cause.

PhysicalRealityLawSyntacticBehaviour potentially contains everything and is abstraction with abstract barrier from PhysicalReality <- EathGeographicLocation.

At first, possible to add NotesDSL goal, but it is very abstract, instead, it is better to add information about process of self-extending of NotesDSL.




Mon Oct 31 10:41:45 EET 2022

PhysicalRealityLawSyntacticBehaviour{PhysicalRealityLawSyntacticBehaviour}


PhysicalRealityLawSyntacticBehaviour{PhysicalRealityLawSyntacticBehaviour}

What type will be added next?

AbstractInterpreter (abstracting from Myself, but stills to be Personal) is NotesDSL implementation in NL, it's Runtime InitialState has NotesDSL Operations as NotesDSL CLI commands, for example, AbstractInterpreter.init. TODO: Add more description from PL.

GitHubRepositoryNotesDSLProjectApproach<NotesDSL.txt>{InitialState States LastState FinalState} <- Notes.txtRuntime is NotesDSL.txt representation, but we have Self-extendable AbstractInterpreter that writes it's own source code, extend it and interpret itself.

Could not define Metaknowledge, because all information about NotesDSL is already known.

Simply define Set subtype and describe all it's subtypes in Set{Set}.
